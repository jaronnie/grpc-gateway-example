// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core.proto

package corev1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("core.proto", fileDescriptor_f7e43720d1edc0fe) }

var fileDescriptor_f7e43720d1edc0fe = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x2f, 0x4a,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0x02, 0x19, 0xa9, 0x39, 0x39,
	0xf9, 0xe5, 0xf9, 0x45, 0x39, 0x29, 0x10, 0x09, 0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54,
	0xfd, 0xc4, 0x82, 0x4c, 0xfd, 0xc4, 0xbc, 0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62,
	0x88, 0xac, 0x51, 0x13, 0x13, 0x17, 0x1b, 0xc8, 0x94, 0x32, 0x43, 0xa1, 0x20, 0x2e, 0x8e, 0xe0,
	0xc4, 0x4a, 0x0f, 0x90, 0x7e, 0x21, 0x61, 0x88, 0xb4, 0x1e, 0x98, 0x17, 0x94, 0x5a, 0x58, 0x9a,
	0x5a, 0x5c, 0x22, 0x25, 0x88, 0x2a, 0x58, 0x90, 0x53, 0xa9, 0x24, 0xd7, 0x74, 0xf9, 0xc9, 0x64,
	0x26, 0x09, 0x25, 0x61, 0xb0, 0xf1, 0x65, 0x86, 0xfa, 0xc9, 0x45, 0xa9, 0x29, 0xa9, 0x79, 0x25,
	0x99, 0x89, 0x39, 0x86, 0x56, 0x8c, 0x5a, 0x42, 0xc1, 0x5c, 0x9c, 0x30, 0x33, 0x8d, 0xa8, 0x61,
	0xa8, 0x11, 0xc8, 0x50, 0x7f, 0x84, 0xa1, 0xc6, 0x44, 0x1b, 0x2a, 0x05, 0x36, 0x54, 0x44, 0x89,
	0x1f, 0x66, 0x68, 0x6e, 0x62, 0x72, 0x46, 0x66, 0x5e, 0xaa, 0x15, 0xa3, 0x96, 0x13, 0x6f, 0x14,
	0xb7, 0x9e, 0x7e, 0x41, 0x92, 0x3e, 0x24, 0x20, 0x92, 0xd8, 0xc0, 0x9a, 0x8d, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xbd, 0xb2, 0x7e, 0xf2, 0x5f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Corev1Client is the client API for Corev1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Corev1Client interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SayHello3(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type corev1Client struct {
	cc *grpc.ClientConn
}

func NewCorev1Client(cc *grpc.ClientConn) Corev1Client {
	return &corev1Client{cc}
}

func (c *corev1Client) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/proto.corev1/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corev1Client) SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/proto.corev1/SayHello2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corev1Client) SayHello3(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/proto.corev1/SayHello3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Corev1Server is the server API for Corev1 service.
type Corev1Server interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SayHello2(context.Context, *HelloRequest) (*HelloReply, error)
	SayHello3(context.Context, *HelloRequest) (*HelloReply, error)
}

// UnimplementedCorev1Server can be embedded to have forward compatible implementations.
type UnimplementedCorev1Server struct {
}

func (*UnimplementedCorev1Server) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedCorev1Server) SayHello2(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello2 not implemented")
}
func (*UnimplementedCorev1Server) SayHello3(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello3 not implemented")
}

func RegisterCorev1Server(s *grpc.Server, srv Corev1Server) {
	s.RegisterService(&_Corev1_serviceDesc, srv)
}

func _Corev1_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Corev1Server).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.corev1/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Corev1Server).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corev1_SayHello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Corev1Server).SayHello2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.corev1/SayHello2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Corev1Server).SayHello2(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corev1_SayHello3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Corev1Server).SayHello3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.corev1/SayHello3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Corev1Server).SayHello3(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Corev1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.corev1",
	HandlerType: (*Corev1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Corev1_SayHello_Handler,
		},
		{
			MethodName: "SayHello2",
			Handler:    _Corev1_SayHello2_Handler,
		},
		{
			MethodName: "SayHello3",
			Handler:    _Corev1_SayHello3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}
